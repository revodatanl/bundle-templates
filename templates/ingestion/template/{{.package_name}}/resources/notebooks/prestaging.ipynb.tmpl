{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%pip install pushcart==1.7.3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {},
     "inputWidgets": {},
     "nuid": "bfdd9f3a-62fe-4642-8617-6f18f0658bcb",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "# Prestaging\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {},
     "inputWidgets": {},
     "nuid": "e96da19e-be05-48e5-9fbc-fc53145b7527",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "#### Load libraries and functions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "60385ce8-677c-4fa1-b71b-d9da3963e343",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "import dlt\n",
    "from pushcart.metadata import Metadata\n",
    "from pyspark.sql import DataFrame\n",
    "\n",
    "# Write a function to read the expectations from the metadata\n",
    "# from {{.package_name}}.metadata import read_expectations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If not on Databricks, start a local spark session\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if \"spark\" not in locals():\n",
    "    from pyspark.sql import SparkSession\n",
    "\n",
    "    spark = SparkSession.builder.appName(\"spark\").getOrCreate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {},
     "inputWidgets": {},
     "nuid": "cd17e80d-da57-4950-bdf2-d296d3df11d1",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "### Set parameters\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {},
     "inputWidgets": {},
     "nuid": "db0389ea-1f86-4639-9eaf-7a9ed0b67426",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "table_name = spark.conf.get(\"table_name\")\n",
    "metadata_path = spark.conf.get(\"metadata_path\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {},
     "inputWidgets": {},
     "nuid": "712a847b-3f73-44fe-be44-f4edd8de673f",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "#### Load [expectations](https://learn.microsoft.com/en-us/azure/databricks/delta-live-tables/expectations)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "0a7f51e8-7952-46d0-8cde-e7a999d407a9",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# expectations = read_expectations(\n",
    "#     metadata_path=metadata_path,\n",
    "#     table_name=table_name,\n",
    "# )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "a6b516b5-14f7-411c-9af1-03416b112573",
     "showTitle": false,
     "title": ""
    }
   },
   "source": [
    "## Transform Landing to Prestaging\n",
    "\n",
    "Include expectations, change column datatypes, drop NonFunctional / Auto Loader columns, and apply custom column transformations (unique to datasetobject), if applicable.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "01c20bca-909c-4ff9-aa79-c99e6787edc5",
     "showTitle": false,
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "@dlt.table(\n",
    "    name=f\"prestaging_{table_name}\",\n",
    "    # temporary=True,\n",
    "    table_properties={\"quality\": \"bronze\"},\n",
    "    comment=\"Data transformed from landing\",\n",
    ")\n",
    "# @dlt.expect_all_or_drop(expectations)\n",
    "def bronze_to_silver() -> DataFrame:\n",
    "    \"\"\"Transform ingested data from landing to prestaging schema, using a metadata-driven approach.\"\"\"\n",
    "    bronze_df = dlt.read_stream(f\"landing_{table_name}\")\n",
    "    md = Metadata.from_existing_csv(\n",
    "        path=f\"{metadata_path}/{table_name}.csv\",\n",
    "        data_df=bronze_df,\n",
    "    )\n",
    "    return md.transform()"
   ]
  }
 ],
 "metadata": {
  "application/vnd.databricks.v1+notebook": {
   "dashboards": [],
   "language": "python",
   "notebookMetadata": {
    "pythonIndentUnit": 4
   },
   "notebookName": "pushcart_prestaging",
   "widgets": {}
  },
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
