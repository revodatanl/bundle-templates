[tool.poetry]
name = "{{.package_name}}"
version = "0.1.0"
description = "{{.description}}"
authors = [
    "{{.author}} <{{.email}}>",
]
readme = "README.md"
classifiers = ["Programming Language :: Python :: 3.10.12", "Operating System :: OS Independent"]
packages = [{ include = "{{.package_name}}", from = "src" }]

[tool.poetry.dependencies]
python = "^3.10.12"

[tool.poetry.dev-dependencies]
bumpver = "^2023.1129"
databricks-connect = "^14.3.1"
databricks-sdk = "^0.24.0"
ipykernel = "^6.25.2"
pandas = "2.0.3"
pre-commit = "^3.7.0"
pre-commit-update = "^0.2.1"
pydantic = "^2.6.4"
pyspark = "^3.5.1"

[tool.poetry.group.format.dependencies]
databricks-labs-pylint = "^0.1.1"
mypy = "^1.9.0"
mypy-extensions = "^1.0.0"
pylint = "^3.1.0"
ruff = "^0.3.5"
types-pytz = "^2024.1.0.20240203"

[tool.poetry.group.test.dependencies]
coverage = "^7.4.4"
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310"
line-length = 100
extend-include = ["*.ipynb"]
exclude = [".venv/"]
builtins = ["dbutils", "dlt", "display"]

[tool.ruff.lint]
pydocstyle.convention = "numpy"
select = ["ALL"]
ignore = [
    "D203",     # "One blank line required before class docstring." Should be disabled by default.
    "D213",     # "Multi-line docstring summary should start at the second line." Should be disabled by default.
    "E501",     # "Line too long." If Black is happy, I'm happy.
    "S101",     # "Use of `assert` detected." Used quite often in tests.
    "FBT001",   # "Boolean positional arg in function definition." I sometimes use this.
    "FBT002",   # "Boolean default value in function definition." I sometimes use this too.
    "ERA001",   # "Found commented out code." I comment out code sometimes
    "E731",     # "Do not assign a lambda expression, use a def." Needed for spark UDFs.
    "N812",     # "Lowercase `functions` imported as non-lowercase." Pretty standard for spark programming.
    # formatter-specific exceptions
    "COM812",   # "Missing trailing comma." Ignored since it conflicts with the formatter.
    "ISC001",   # "Implicit string concatenation." Ignored since it conflicts with the formatter.
    # project-specific exceptions
    "T201",     # "`print` found." I use this for debugging. Sue me.
    "S608",     # "Possible SQL injection vector through string-based query construction." This is the way I set up the queries.
]
unfixable = [
    "F401",     # "Unused import." Disabled since it makes linting/formatting notebooks messy and impossible.
]

[tool.mypy]
python_version = "3.10"
strict = true
ignore_missing_imports = true
disallow_untyped_decorators = false
explicit_package_bases = true
files = "src/**/*.py, tests/**/*.py"
exclude = [".venv/"]

[[tool.mypy.overrides]]
module = [
    "dbutils",
    "dlt",
    "display",
]
ignore_missing_imports = true

[tool.pylint]
max-line-length = 100
ignore-paths = [".venv/"]
disable = [
    "C0301",    # "Line too long." My comments and docstrings are sometimes longer than 100 characters.
]

[tool.bumpver]
current_version = "0.1.0"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message = "bump version {old_version} -> {new_version}"
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    '^version = "{version}"$',
    '^current_version = "{version}"$',
]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
